#
# Buildout to create toplone command which uploads Sphinx documentation to Plone site
#
[buildout]
parts = 
        sphinx 
        toplone
        funnelweb

extends =
        http://dist.plone.org/release/4.0.1/versions.cfg

versions = versions

extensions =
  mr.developer
  buildout.dumppickedversions
 
dump-picked-versions-file = picked.cfg
sources = sources
sources-dir = ${buildout:directory}/src
auto-checkout =
allow-picked-versions = true


[sources]
transmogrify.webcrawler = git git://github.com/djay/transmogrify.webcrawler.git
#transmogrify.webcrawler = git git://github.com/miohtama/transmogrify.webcrawler.git

transmogrify.pathsorter = git git://github.com/djay/transmogrify.pathsorter.git
transmogrify.htmltesting = git git://github.com/djay/transmogrify.htmltesting.git

transmogrify.siteanalyser = git git://github.com/djay/transmogrify.siteanalyser.git
#transmogrify.siteanalyser = git git://github.com/miohtama/transmogrify.siteanalyser.git 

transmogrify.htmltesting = git git://github.com/djay/transmogrify.htmltesting.git
#transmogrify.htmltesting = git git://github.com/miohtama/transmogrify.htmltesting.git

# Following have been patched

transmogrify.ploneremote = git git://github.com/djay/transmogrify.ploneremote.git
#transmogrify.ploneremote =  git git://github.com/miohtama/transmogrify.ploneremote.git

transmogrify.htmlcontentextractor = git git://github.com/djay/transmogrify.htmlcontentextractor.git
#transmogrify.htmlcontentextractor = git git://github.com/miohtama/transmogrify.htmlcontentextractor.git

funnelweb = git git://github.com/djay/funnelweb.git


[sphinx]
recipe = collective.recipe.sphinxbuilder
#doc-directory = .
outputs = html
source = ${buildout:directory}/source
build = ${buildout:directory}/build
eggs =
  Sphinx
  Docutils
  roman
  Pygments


#
# Recipe to create toplone command.
# 
# It will walk through all blueprints defined
# in pipeline.cfg and override their target parameter
# to be a remote Plone site given on the command line.
# This all happeins in initialization= magic.
#
# Also Python logger is initialized to give us verbose
# output. Some blueprints use logging module for the output.
#
[toplone]
recipe = zc.recipe.egg
eggs =
  transmogrify.htmltesting
  transmogrify.webcrawler
  transmogrify.siteanalyser
  transmogrify.htmlcontentextractor
  transmogrify.pathsorter
  transmogrify.ploneremote
  
# This initialization script sets remote site argument
# for remote blueprints defined in pipeline.cfg
initialization =
  from urllib import pathname2url as url
  from sys import argv
  import logging, os
  
  logging.basicConfig(level=logging.DEBUG)
  target=len(argv) > 1 and argv[1] or ''
  args = dict(webcrawler=dict(site_url='file://'+os.getcwd()+'/build/html/'),
      localconstructor=dict(output=url('ploneout')),
      ploneuploader=dict(target=target),
      )
arguments = 'pipeline.cfg', args
entry-points = toplone=transmogrify.htmltesting.runner:runner

# in testing
[funnelweb]
recipe = funnelweb
crawler-url=file://${buildout:directory}/build/html
crawler-ignore=
	cgi-bin
	javascript:
	_static
	_sources
	genindex\.html
	search\.html
	saesrchindex\.js
cache-output =

# Permalinks are Sphinx's on-hover makers that are not used in Plone. We have this dummy rule here to parse 
# them out from body so that they do not corrupt "text" field

template1-title = text //div[@class='body']//h1[1]
template1-_permalink = text //div[@class='body']//a[@class='headerlink']
template1-text = html //div[@class='body']
template1-description = optional //div[contains(@class,'admonition-description')]//p[@class='last']
                     //div[contains(@class,'admonition-description')]
templateauto-condition = python:False

attachmentguess-condition = python: subitem.get('_type') in ['Image']
attachmentguess-defaultpage = index

changetype-value=python:{'Folder':'HelpCenterReferenceManualSection','Document':'HelpCenterLeafPage'}.get(item['_type'],item['_type'])

localupload-output=${buildout:directory}/ploneout

# All folderish content should be checked if they contain
# any items on the remote site which are not presented locally. including base folder
ploneprune-condition=python:item.get('_type') in ['HelpCenterReferenceManualSection','HelpCenterReferenceManual'] or item['_path'] == ''


[test]
recipe = zc.recipe.testrunner
eggs =
  ${toplone:eggs}
  transmogrify.htmltesting

[lxml]
recipe = z3c.recipe.staticlxml
egg = lxml


[versions]
roadrunner = 0.2.3.1
z3c.form = 1.9.0
zc.recipe.egg=1.2.0
plone.reload = 1.0
collective.recipe.sphinxbuilder = 0.7.0
Sphinx = 1.0.4
Docutils = 0.6

