===========================
 Installation instructions
===========================

.. contents ::

Introduction
-------------

This document tells how to install Plone with Go Mobile add-on on your server or development computer.

Supported operating systems are all operating systems which run Plone

* Linux

* OSX 

* Windows

Prerequisitements
-----------------

The following must be installed to run Plone with Go Mobile add-on. 
These are covered by the installation instructions.

* Plone 3 / Python 2.4 

* lxml 

* Python Imaging Library

* Internet connection is needed during the installation process

For development
===============

The following is needed only for development:

* GCC compiler (MingW on Windows)

* Python development headers (sudo apt-get install python2.4-dev)

* Subversion client (svn)

Installing prerequisitements
----------------------------

Windows
=======

* Run Plone 3 installer 

* Register your Python distribution to Windows registry

* Install lxml: http://pypi.python.org/pypi/lxml/2.2.4 (Download .exe for Python 2.4)

OSX
===

* Install XCode / OSX SDK

* Use `collective.buildout <http://svn.plone.org/svn/collective/buildout/python/src/docs>`_
  to create a Python 2.4 interpreter from source
  
* Activate virtualenv of Python 2.4 interpreter (this will modify default look-up paths of shell)::

  source ~/python-buildout/python2.4/bin/activate
    
* Install Plone project templates::

  easy_install ZopeSkel
  
* Create Plone 3 buildout::

  paster create -t plone_buildout plone3_buildout
  
Linux
=====

Install gcc, Python 2.4 and setuptools (may vary depending on the distribution)::

   sudo apt-get install build_essential python2.4 python2.4-dev 

Install Distribute (setuptools replacement) for Python 2.4::

    curl -O http://python-distribute.org/distribute_setup.py
    python2.4 distribute_setup.py

Install virtualenv::

    easy_install virtualenv
    
Create Python environment for your Plone::

    virtualenv --no-site-packages -p /usr/bin/python2.4 plone-python
    
Activate environment::

    source plone-python/bin/activate
         
* Install Plone project templates::

  easy_install ZopeSkel
  
* Create Plone 3 buildout::

  paster create -t plone_buildout plone3_buildout

Differences between Windows buildout and UNIX buildouts
-------------------------------------------------------

UNIX buildout comes with PIL and lxml recipes,
as it is pain to set-up these binaries
on these platforms otherwise.

On Windows, they are included in the unified installer.

Modifying your hosts file
--------------------------

Modifying hosts file is the easiest way to fake HTTP request "to act like mobile" from your web browser
to your local instance.

After modifications, the following URL will render in web mode (like before modification)::

    http://localhost:8080/Plone
    
..but the following will result to the mobile mode::

    http://m.localhost:8080/Plone
    
...and the following page is laoded by mobile simulator::

    http://preview.localhost:8080/Plone

hosts file location
====================

On Windows: C:\\Windows\\SYSTEM32\\Drivers\\etc\\hosts

On UNIX: /etc/hosts

Adding required lines
=====================

Add the following line to hosts file (note that on UNIX you need to use sudo)::

        127.0.0.1       m.localhost preview.localhost

Starting Plone in debug mode
----------------------------------

Run command::

        bin/instance fg

On Windows, open the command line and type::

        cd "C:\Program Files\Plone 3"
        bin\instance.exe fg

Installing add-on products on Plone site
-----------------------------------------

This step is executed after you have a running Plone instance in place.
They modify a running Plone site database, so that all 
stuff needed for running mobile site is there.

Installing add-on products
==========================

Login to Plone site as administrative user.
Your admin account has been given you either

* In adminPassword

* In buildout.cfg file (buildout based installations)

Use *Site setup* control panel in Plone and its *Add-on products* tool to install Go Mobile add-on products.

* *Go Mobile* is needed always

* *Go Mobile Default Theme* or any other mobile theme is needed always

* *Go Mobile Convergence* is needed if you wish to publish **both* web and mobile content on the same site

Trunk version installation
--------------------------

This is needed if you wish to develop Go Mobile code base.

Modify buildout to include Go Mobile trunk version sources
==========================================================

* Add the following to your buildout.cfg::

Add Go Mobile snippets as described in the following::

    [buildout]

     parts =
        ...
        
     parts += ${gomobile.config:parts}
     
     extends =
        ...
        http://plonegomobile.googlecode.com/svn/trunk/gomobile/gomobile.buildout/gomobile.trunk.commit-access.cfg

     extensions = mr.developer

     eggs =
        Plone
        ...
     
     eggs += ${gomobile.config:eggs}

    [instance]
    zcml =
        ...
        
    zcml += ${gomobile.config:zcml}

 
        
*gomobile.trunk.cfg* is an buildout extension file defining where to get trunk source code
using `Mr. Developer <http://pypi.python.org/pypi/mr.developer>`_ buildout extension.

.. note ::

       If you do not have Google Code membership or commit access you may need to replace
       address prefixed with *https* as *http* in gomobile.trunk.cfg. For this,
       you need to make a local copy of gomobile.trunk.cfg, edit it and
       change extensions= in buildout.cfg to point to the local file.
       
.. note ::

        Dexterity (new Plone system) component version configuration
        is used as a base to have a compatible component configuration
        for the product.
        
Making code repository certificates available in Subversion
===========================================================

Subversion *svn* command is reluctant do deal with repositories
for which the user has not manually accepted HTTPS certificate.

This process cannot be automatized currently.

SVN stores the accepted certificates in the user ~/.subversion
folder. But to get the certificates there in the first place you need 
to checkout some of the projects manually.

Please do the following in your buildout folder. Note that using *http* or *https* 
depends whether you checkout projects with commit access or not::

    svn co https://svn.plone.org/svn/collective/collective.fastview/trunk src/collective.fastview
    svn co https://mobilesniffer.googlecode.com/svn/trunk/mobile.sniffer src/mobile.sniffer
    svn co https://plonegomobile.googlecode.com/svn/trunk/gomobile/gomobile.mobile src/gomobile.mobile
    
Running buildout with Mr. Developer
===================================

You can checkout the all code after accepting the certificates using steps above.

Step 1
++++++

Activate your Python 2.4 virtual environment (depends on how your Python is installed)::

        ~/python2.4/bin/activate

Step 2
++++++

Run buildout. This will downlaod remote extensions over HTTP and set-up Mr. Developer scripts::

        bin/buildout 
        
This will result an error, but makes *bin/developer* command available.

Step 3
++++++

Checks out source code for all packages.

        bin/develop co ""
        
Step 4
++++++

Build codebase with checked out source code::

        bin/buildout
        
Start Plone
===========

Run::
 
 
    bin/instance fg
    
...and hope there was no version incompatibilities between products.

Running automatic test suite
-----------------------------

After you have succesfully launched Plone, you can 
run automatic Go Mobile test suite which includes unit and functional tests.
This will guarantee that your operating system libraries and Python module
set is compatible with Go Mobile.

To run test suite::

	bin/instance test -m gomobile* -m mobile*
 
After test suite completes, it should report zero failures::

  Total: 119 tests, 0 failures, 0 errors

You also need to run tests for mobile.* framework packages::

 
                

