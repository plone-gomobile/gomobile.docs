[transmogrifier]
pipeline =
	webcrawler
    typerecognitor
    todrop
    templatefinder
# isindex is before moves. not sure why but it has to be
    isindex
	makedoc1
#	makeattachments
# want titles before relinker so get original ids
    title_from_link
    relinker
# treeserializer before contructor to put in right order again
    treeserializer
    encode-all
    tosection
    topage
    topublish
#    localconstructor
    ploneuploader
    schemaupdater
    publish


[webcrawler]
blueprint = transmogrify.webcrawler
site_url  = %s
ignore =
	cgi-bin
	javascript:

[todrop]
blueprint = collective.transmogrifier.sections.condition
condition: python:item.get('_mimetype') not in ['application/x-javascript','text/css','text/plain','application/x-java-byte-code'] and item.get('_path','').split('.')[-1] not in ['class']

[treeserializer]
blueprint = transmogrify.pathsorter

[typerecognitor]
blueprint = transmogrify.webcrawler.typerecognitor


[relinker]
blueprint = transmogrify.siteanalyser.relinker
#link_expr = python:item.get('_type',None)=='Image' and item['_path'][:-1].endswith('image') and item['_path']+'_medium' or item.get('_type',None)=='Image' and item['_path']+'/image_web' or item['_path']

#
# Extract title, description and content text from Sphinx generated HTML page
#
# Title is the first <h1> element
#
# Description is reST "admonition" with name Description 
#
# Text is what is left to <body> after removing title and description 
#
# Note that spaces in XPaths must be escaped as &#32;
#
[templatefinder]
blueprint = transmogrify.htmlcontentextractor
auto=False
1-title = text //div[@class='body']//h1[1]
1-permalink = text //div[@class='body']//a[@class='headerlink']
1-description = text //div[contains(@class,'admonition-description')]//p[@class='last'] //div[contains(@class,'admonition-description')]  
1-text = html //div[@class='body']



[makedoc1]
blueprint = collective.transmogrifier.sections.inserter
key = string:_type
value = string:Document
condition = python:item.get("_mimetype") in ["text/html"]

[title_from_link]
blueprint = transmogrify.siteanalyser.title
ignore =
	click
	read more

#[title_from_id]
#blueprint = collective.transmogrifier.sections.inserter
#key = string:title
#value = python: item['_path'].split('/')[-1]
#condition = python:'title' not in item and '_path' in item

[tosection]
blueprint = collective.transmogrifier.sections.inserter
key = string:_type
value = string:HelpCenterReferenceManualSection
condition = python:item.get('_type')=='Folder' and not options.get('disabled')


[topage]
blueprint = collective.transmogrifier.sections.inserter
key = string:_type
value = string:HelpCenterLeafPage
condition = python:item.get('_type')=='Document' and not options.get('disabled')

#
# Set the workflow transition key hint which will be used publish the item.
# This value is later read by [publish] and we can have conditions
# to have different WF transitions for different content types 
#
# Note that images do not have workflow and they inherit
# permission settings of the parent container
#
[topublish]
blueprint = collective.transmogrifier.sections.inserter
key = string:_transitions
value = python:["publish"]
condition = python:item.get('_type') != 'Image' and not options.get('disabled')

[encode-all]
blueprint = collective.transmogrifier.sections.codec
keys =
   text
to = utf8

[localconstructor]
blueprint = transmogrify.webcrawler.cache
target = ploneout
output = ploneout

#
# Create remote item on Plone site
#
[ploneuploader]
blueprint = transmogrify.ploneremote.remoteconstructor

#
# Update the remote item with new extracted content from Sphinx documentation
# 
[schemaupdater]
blueprint = transmogrify.ploneremote.remoteschemaupdater

#
# Set index.html as the default page of the folder
#
[isindex]
blueprint = transmogrify.siteanalyser.defaultpage

[makeattachments]
blueprint = transmogrify.siteanalyser.attach
condition = python: subitem.get('_type') in ['Image']
defaultpage = index-html

#
# Publish the uploaded documentation (if not public yet)
#
[publish]
blueprint = transmogrify.ploneremote.remoteworkflowupdater
transitions = submit publish
transitions-key = _transitions

